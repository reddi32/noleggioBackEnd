package com.example.noleggio.controller;

import java.util.Optional;

//import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import org.springframework.web.bind.annotation.ResponseBody;

import com.example.noleggio.model.Utenti;
import com.example.noleggio.repo.UtentiRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/utenti") // This means URL's start with /noleggio (after Application path)
public class UtentiController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
private UtentiRepository utentiRepository;
	 @CrossOrigin(origins = "http://localhost:4200")
	 @PostMapping(path="/add") // Map ONLY POST Requests
	  public String addNewUser (@RequestBody Utenti nome) {
	    // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request
		// utenti n = new utenti();
		// n.setNome(nome);
		// n.setCognome(cognome);
		// n.setEmail(email);
		// n.setPassword(password);
		// n.setIdUtente(idUtente);
		// n.setDataDiNascita(dataDiNascita);
		// n.setPaeseDiNascita(paeseDiNascita);
		// n.setPartitaIva(partitaIva);
		// n.setCodiceFiscale(codiceFiscale);
		 utentiRepository.save(nome);
		 return nome.toString();
		}
	 @CrossOrigin(origins = "*")
	 @GetMapping(path="/all")
	  public @ResponseBody Iterable<Utenti>/*Optional<utenti>*/ getUtenti(/*@RequestParam Integer idUtente @RequestParam String nome*/) {
	    // This returns a JSON or XML with the users
		return utentiRepository.findAll();
		//return utentiRepository.findById(idUtente);
	    //return utentiRepository.findByNome(nome);
	  }
	 @CrossOrigin(origins = "*")
	 @GetMapping(path="/nome")
	  public @ResponseBody Optional<Utenti> getUtenti(@RequestParam String nome) {
	    // This returns a JSON or XML with the users
	    //return utentiRepository.findById(idUtente);
	    return utentiRepository.findByNome(nome);
	  }
}
